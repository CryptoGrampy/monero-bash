#!/usr/bin/env bash

# /monero-bash/ checks
scriptPath="$(realpath $0)"
installDirectory="$(dirname "$scriptPath")" && cd $installDirectory
if [[ $installDirectory == *"/monero-bash" ]]; then
	source "$installDirectory/src/all" &>/dev/null || exit 1
	if [[ $varMissing = "true" || $funcMissing = "true" || $configMissing = "true" || $versionMissing = "true" || $? = "1" ]]; then
		printf "\033[1;31mERROR: monero-bash sourcing error:\n"
		[[ $varMissing = "true" ]]&& printf "\033[1;37mVariables not sourced\n"
		[[ $funcMissing = "true" ]]&& printf "\033[1;37mFunctions not sourced\n"
		[[ $configMissing = "true" ]]&& printf "\033[1;37mConfig not sourced\n"
        [[ $versionMissing = "true" ]]&& printf "\033[1;37mVersion not sourced\n"
		printf "\033[0;31mExiting for safety...\n"
		exit
	fi
	[[ $1 = "" ]]&& interactive="true"
	[[ $1 != "" ]]&& options="true"
else
	printf "\033[1;31mExecuting monero-bash while it isn't in the /monero-bash/ folder is dangerous\n"
	printf "\033[0;31mExiting for safety...\n"
	exit
fi

# Debug
if [[ $1 = "DEBUG" ]]; then
	DEBUG
	exit
fi

# Interactive Config
if [[ $FIRST_TIME = "true" && $1 = "" ]]; then
	Interactive_Config
fi

#
# Interactive Wallet Selection
#
# this is the default behavior when
# invoking "monero-bash" after
# initial configuration
#
if [[ $interactive = "true" ]]; then
	Monero_Bash_Title
	$white; Wallet_Count ; Wallet_List ; echo
	while true ;do
		$white; echo -n "Pick wallet or "
		$ired; echo -n "[new]"
		$white; echo -n ": "
		read walletSelection
		if [[ $walletSelection = "" ]]; then
			$ired; echo "Error: empty input" ;$off
			exit
		fi
		if [[ $walletList = *"$walletSelection"* ]]; then
			$white; echo -n "Password: "
			read -s walletPassword && echo
			Start_Wallet
			break
		elif [[ $walletSelection = "new" || $walletSelection = "New" || $walletSelection = "NEW" || $walletSelection = "[new]" || $walletSelection = "[New]" ]]; then
			Create_Wallet
			break
		else
			$ired; echo "Error: wallet does not exist"
		fi
	done
	exit
fi

# Option Flags
if [[ $options = "true" ]]; then
	for optionChoice in $1 ;do
		case $optionChoice in
			config)
				Interactive_Config
				break
				;;
			uninstall)
				Uninstall
				break
				;;
			update)
				Update
				break
				;;
			upgrade)
				if [[ $2 = *"bash"* || $2 = *"Bash"* || $2 = *"BASH"* ]]; then
					$ired; echo -n "Upgrade monero-bash? (Y/n) " ;$off
					Yes(){ Download_Monero_Bash ;}
					No(){ echo "Exiting..." ;}
					YES_no
				fi
				if [[ $2 = *"cli"* || $2 = *"CLI"* || $2 = *"Cli"* ]]; then
					$ired; echo -n "Upgrade Monero-CLI? (Y/n) " ;$off
					Yes(){ Download_Monero_CLI ;}
					No(){ echo "Exiting..." ;}
					YES_no
				fi
				if [[ $2 = "" ]]; then
					$ired; echo -n "Upgrade all? (Y/n) " ;$off
					Yes(){ Download_All ;}
					No(){ echo "Exiting..." ;}
					YES_no
				fi
				break
				;;
			daemon)
				[[ $2 = "start" ]]&& Start_Daemon_Detached
				[[ $2 = "stop" ]]&& Kill_Daemon
				[[ $2 = "full" ]]&& Start_Daemon
				[[ $2 = "status" || $2 = "" ]]&& Daemon_Health
				break
				;;
			version)
				Current_Versions
				break
				;;
			path)
				Reset_Path
				break
				;;
			list)
				Wallet_Count
				Wallet_List
				break
				;;
			size)
				$ired; echo -n "monero-bash size: " ;$off
				du -h $installDirectory | tail -n 1 | awk '{print $1}'
				break
				;;
			price)
				Price_Check
				break
				;;
			help)
				Print_Usage
				break
				;;
			*)
				$ired; echo "monero-bash: invalid option!"
				$white; echo -n "for help, type: "
				$bred; echo "monero-bash help"
				break
		esac
	done
	exit
fi
