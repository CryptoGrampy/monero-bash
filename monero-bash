#!/usr/bin/env bash

# installDirectory = where ever /monero-bash/ is
scriptPath="$(realpath $0)"
installDirectory="$(dirname "$scriptPath")"

# check for monero-bash source files
if [[ $installDirectory == *"/monero-bash" ]]; then
	cd "$installDirectory"
	source "$installDirectory/src/source"
	if [[ $? != "0" ]]; then
		[[ $varMissing = "true" ]]&& printf "\033[1;37mVariables not sourced\n"
		[[ $funcMissing = "true" ]]&& printf "\033[1;37mFunctions not sourced\n"
        [[ $stateMissing = "true" ]]&& printf "\033[1;37mmonero-bash state file missing\n"
		[[ $debugMissing = "true" ]]&& printf "\033[1;37mmonero-bash debug file missing\n"
		[[ $hashlistMissing = "true" ]]&& printf "\033[1;37mmonero-bash hashlist file missing\n"
		printf "\033[0;31mExiting for safety...\n"
		exit
	fi
else
	printf "\033[1;31mExecuting monero-bash while it isn't in the /monero-bash/ folder is DANGEROUS\n"
	printf "\033[0;31mExiting for safety...\n"
	exit
fi

# DEBUG COMMAND - read /src/debug for more info
if [[ $1 = "DEBUG_04e3be9" ]]; then
	case $2 in
		"") DEBUG_04e3be9 ;;
		*) "$2" ;;
	esac
	exit
fi

# safety checks
safety_Root
safety_LinuxFolders
safety_Home
safety_Systemd

# Installation
if [[ $FIRST_TIME = "true" ]]; then
	monerobash_Install
	exit
fi

# even more safety checks
if [[ $FIRST_TIME != "true" ]]; then
	safety_UsrLocalShare
	safety_DotMoneroBash
	missing_Wallets
	missing_config_Folder
	missing_config_All
fi

# interactive/option check
[[ $1 = "" ]]&& interactive="true"
[[ $1 != "" ]]&& options="true"

# Interactive Wallet Selection
if [[ $interactive = "true" ]]; then
	print_MoneroBashTitle
	if [[ $AUTO_UPDATE = "true" ]]; then
		update_All
		echo
	fi
	$white; wallet_Count ; wallet_List ; echo
	while true ;do
		$white; echo -n "Pick wallet or "
		$ired; echo -n "[new]"
		$white; echo -n ": "
		read walletSelection
		if [[ $walletSelection = "" ]]; then
			$ired; echo "monero-bash error: empty input" ;$off
			exit
		fi
		if [[ $walletList = *"$walletSelection"* ]]; then
			$white; echo -n "Password: "
			read -s walletPassword && echo
			wallet_Start
			break
		elif [[ $walletSelection = "new" || $walletSelection = "New" || $walletSelection = "NEW" || $walletSelection = "[new]" || $walletSelection = "[New]" ]]; then
			wallet_Create
			break
		else
			$ired; echo "monero-bash error: wallet does not exist"
		fi
	done
	exit
fi

# Option Flags
if [[ $options = "true" ]]; then
	case $1 in
		xmrig) print_NotYet ;;
		p2pool) print_NotYet ;;
		watch) print_NotYet ;;
		mine) print_NotYet ;;
		backup) backup_Wallets ;;
		decrypt) backup_Decrypt ;;
		uninstall) monerobash_Uninstall ;;
		update) update_All ;;
		version) print_Version ;;
		list) wallet_Count && wallet_List ;;
		size) print_Size ;;
		price) check_Price ;;
		status) status_All ;;
		integrity) CHECK_HASH_LIST ;;
		help) print_Usage ;;
		gpg)
			case $2 in
				"") gpg_Toggle ;;
				import) gpg_import_All ;;
				*) error_Unknown ;;
			esac
			;;
		daemon)
			case $2 in
				start) daemon_Start ;;
				stop) daemon_Stop ;;
				full) daemon_start_Full ;;
				kill) daemon_Kill ;;
				status|"") status_Daemon ;;
				*) error_Unknown ;;
			esac
			;;
		upgrade)
			[[ $* = *"verbose"* ]]&& VERBOSE="true"
			[[ $* = *"force"* ]]&& FORCE_UPGRADE="true" &&$ired&& echo "Forcefully upgrading...!" ;$off
			if [[ $2 = *"bash"* || $2 = *"Bash"* || $2 = *"BASH"* ]]; then
				$bwhite; echo -n "Upgrade monero-bash? (Y/n) " ;$off
				Yes(){ upgrade_MoneroBash ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "monero" || $2 = "Monero" || $2 = "MONERO" ]]; then
				$bwhite; echo -n "Upgrade Monero? (Y/n) " ;$off
				Yes(){ upgrade_Monero ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"xmrig"* || $2 = *"XMRig"* || $2 = *"XMRIG"* || $2 = *"Xmrig"* ]]; then
				$bwhite; echo -n "Upgrade XMRig? (Y/n) " ;$off
				Yes(){ upgrade_XMRig ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"p2p"* || $2 = *"P2P"* || $2 = *"P2p"* ]]; then
				$bwhite; echo -n "Upgrade P2Pool? (Y/n) " ;$off
				Yes(){ upgrade_P2Pool ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "all" ]]; then
				$bwhite; echo -n "Upgrade all packages? (Y/n) " ;$off
				Yes(){ upgrade_All ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "" ]]; then
				print_Error "Pick a package or <all>"
				print_Version
			else
				error_Unknown
			fi
			;;
		install)
			[[ $* = *"verbose"* ]]&& VERBOSE="true"
			if [[ $2 = *"bash"* || $2 = *"Bash"* || $2 = *"BASH"* ]]; then
				$bwhite; echo -n "Install monero-bash? (Y/n) " ;$off
				Yes(){ install_MoneroBash ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "monero" || $2 = "Monero" || $2 = "MONERO" ]]; then
				$bwhite; echo -n "Install Monero? (Y/n) " ;$off
				Yes(){ install_Monero ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"xmrig"* || $2 = *"XMRig"* || $2 = *"XMRIG"* || $2 = *"Xmrig"* ]]; then
				$bwhite; echo -n "Install XMRig? (Y/n) " ;$off
				Yes(){ install_XMRig ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"p2p"* || $2 = *"P2P"* || $2 = *"P2p"* ]]; then
				$bwhite; echo -n "Install P2Pool? (Y/n) " ;$off
				Yes(){ install_P2Pool ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "all" ]]; then
				$bwhite; echo -n "Install all packages? (Y/n) " ;$off
				Yes(){ install_All ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "" ]]; then
				print_Error "Pick a package or <all>"
				print_Version
			else
				error_Unknown
			fi
			;;
		remove)
			[[ $* = "force" ]]&& FORCE_REMOVE="true" &&$ired&& echo "Forcefully removing...!" ;$off
			if [[ $2 = *"bash"* || $2 = *"Bash"* || $2 = *"BASH"* ]]; then
				remove_MoneroBash
			elif [[ $2 = "monero" || $2 = "Monero" || $2 = "MONERO" ]]; then
				$bred; echo -n "Remove Monero? (Y/n) " ;$off
				Yes(){ remove_Monero ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"xmrig"* || $2 = *"XMRig"* || $2 = *"XMRIG"* || $2 = *"Xmrig"* ]]; then
				$bred; echo -n "Remove XMRig? (Y/n) " ;$off
				Yes(){ remove_XMRig ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = *"p2p"* || $2 = *"P2P"* || $2 = *"P2p"* ]]; then
				$bred; echo -n "Remove P2Pool? (Y/n) " ;$off
				Yes(){ remove_P2Pool ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "all" ]]; then
				$bred; echo -n "Remove all packages? (Y/n) " ;$off
				Yes(){ remove_All ;}
				No(){ echo "Exiting..." ;exit;}
				prompt_YESno
			elif [[ $2 = "" ]]; then
				print_Error "Pick a package or <all>"
				print_Version
			else
				error_Unknown
			fi
			;;
		*)
			$ired; echo "monero-bash: invalid option!"
			$white; echo -n "for help, type: "
			$bred; echo "monero-bash help"
	esac
	exit
fi
