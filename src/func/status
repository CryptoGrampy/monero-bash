#!/usr/bin/env bash
# status function, prints multiple helpful stats

status_All()
{
	print_MoneroBashTitle
	print_Version
	status_System
	[[ $MONERO_VER != "" ]]&& status_Monero
	[[ $P2POOL_VER != "" ]]&& status_P2Pool
	[[ $XMRIG_VER != "" ]]&& status_XMRig
	echo
	exit 0
}

status_System()
{
	$bblue; printf "System      | "
	$iwhite; echo "$(uptime -p)"
	echo
}

status_Template()
{
	$bwhite; printf "$NAME_PRETTY: " ;$off
	if pgrep $DIRECTORY/$PROCESS -f &>/dev/null ;then
		$bgreen; echo "online" ;$off

		# ps stats
		ps -o "| %C | %t |" -p $(pgrep $DIRECTORY/$PROCESS -f)

		# process specific stats
		EXTRA_STATS
	else
		$bred; echo "offline" ;$off
	fi
}

status_Monero()
{
	define_Monero
	EXTRA_STATS(){ $binMonero/monerod status ;echo;}
	status_Template
}

status_P2Pool()
{
	define_P2Pool
	EXTRA_STATS()
	{
		$bwhite; printf "Wallet        | "
		$white; echo "${WALLET:0:6}...${WALLET: -6}"

		# Get p2pool.log into memory.
		# Also ONLY look for logs after
		# p2pool is fully synced.
		local LOG="$(tac $DIRECTORY/p2pool.log | grep -m1 "SideChain SYNCHRONIZED")"

		# Return error if P2Pool is not synced yet.
		if [[ $LOG != *"SideChain SYNCHRONIZED"* ]]; then
			$bred; printf "%s\n\n" "Warning       | P2Pool is not fully synced yet"
			return 1
		else
			local LOG="$(sed -n "/$LOG/,/*/p" $DIRECTORY/p2pool.log)"
		fi

		# SHARE OUTPUT VARIABLE
		local shareOutput="$(echo "$LOG" | grep "SHARE FOUND")"

		# SHARES PER HOUR
		if [[ -z $shareOutput ]]; then
			local sharesFound="0"
		else
			local sharesFound="$(echo "$shareOutput" | wc -l)"
		fi
		local processUnixTime="$(ps -p $(pgrep $DIRECTORY/$PROCESS -f) -o etimes=)"
		local processHours="$(($processUnixTime / 60 / 60))"
		[[ $processHours = 0 ]] && processHours="1"

		# SHARES PER DAY (not floating, 47 hours = 1 day)
		if [[ $processHours -lt 24 ]]; then
			local processDays="1"
		else
			local processDays="$(($processHours / 24))"
		fi

		# SHARES/hour & SHARES/day WITH FLOATING POINT
		local sharesPerHour="$(printf %.2f\\n "$((1000000000 * $sharesFound / $processHours ))e-9")"
		local sharesPerDay="$(printf %.2f\\n "$((1000000000 * $sharesFound / $processDays ))e-9")"

		# SHARES FOUND
		$bgreen; printf "Shares found  | "
		$bwhite; printf "$sharesFound "
		echo "($sharesPerHour per hour / $sharesPerDay per day)"

		# LATEST SHARE
		local latestShare="$(echo "$shareOutput" | tail -1 | sed 's/NOTICE .\|Stratum.*: //g; s/, diff .*, c/ c/; s/user.*, //')"
		$bblue; printf "Latest share  | "
		$white; echo "$latestShare"

		# LATEST PAYOUT
		local latestPayout="$(tac $binP2Pool/p2pool.log | grep -m1 "payout" | sed 's/NOTICE  //; s/P2Pool //')"
		$byellow; printf "Latest payout | "
		$white; echo "$latestPayout"

		echo
	}
	status_Template
}

status_XMRig()
{
	define_XMRig
	EXTRA_STATS()
	{
		# WALLET (in xmrig.json)
		$bwhite; printf "Wallet       | " ;$off
		local wallet="$(grep -m1 "\"user\":" "$xmrigConf" | awk '{print $2}' | tr -d '","')"
		[[ -z $wallet ]] && echo || echo "${wallet:0:6}...${wallet: -6}"

		# POOL
		$bgreen; printf "Pool         | " ;$off
		grep -m1 "\"url\":" "$xmrigConf" | awk '{print $2}' | tr -d '","'

		# SHARES
		local shares="$(tac "$binXMRig/xmrig-log" | grep -m1 "accepted")"
		$bblue; printf "Latest share | "
		$white; echo "$shares"

		# HASHRATE
		local hashrate="$(tac "$binXMRig/xmrig-log" | grep -m1 "speed" | sed "s/].*miner.*speed/] speed/")"
		$byellow; printf "Hashrate     | "
		$white; echo "$hashrate"
	}
	status_Template
}
