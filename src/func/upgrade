#!/usr/bin/env bash
#
# the upgrade function is made out many seperate functions as having
# all the commands back to back was getting unreadable (even for me)
#
# rough order of operations:
# 1. Pre-hooks
# 2. Download, Verify, Extract, Move
# 3. Edit the local state file
# 4. Recreate the local hashlist
# 5. Post-hooks
#
# there are messages/checks mixed in between
# all the steps, which makes it a bit confusing.
# to add to the un-readability, monero-bash updating itself
# is a special case, so there is also an if/then that handles that
#
# other than that, the functions that make up "upgrade_Template"
# should be self-evident
upgrade_Template()
{
	upgrade_Pre
	print_GreenHash "Downloading [$NAME_PRETTY]"
	download_"$NAME_FUNC"
	print_WhiteHash "Verifying"
	verify_hash_"$NAME_FUNC"

	[[ "$verifyOK" != "true" ]]&& compromised_hash_"$NAME_FUNC"
	print_WhiteHash "Extracting"
	tar -xf "$tmp/$tarName" -C "$tmp"
	code_Tar
	rm -f "$tmp/$tarName"
	error_Exit "rm - error"
	$white; echo -n "$tarName: " ;$igreen; echo "EXTRACTED" ;$off

	local folderName="$(ls "$tmp")"
	if [[ -d "$old" ]]; then
		sudo rm -rf "$old"
		error_Exit "Could not remove old folder"
	fi
	mkdir -p "$old"
	if [[ "$NAME_CAPS" = "MONERO_BASH" ]]; then
		trap "trap_Old" 1 2 3 6 15
		sudo cp "$installDirectory/monero-bash" "$old"
		sudo cp -r "$installDirectory/src" "$old"
		sudo cp -r "$installDirectory/config" "$old"
		trap "trap_MoneroBash" 1 2 3 6 15
		sudo cp -f "$tmp/$folderName/monero-bash" "$installDirectory"
		sudo cp -fr "$tmp/$folderName/src" "$installDirectory"
		sudo cp -fr "$tmp/$folderName/config" "$installDirectory"
		sudo cp -f "$old/src/txt/state" "$state"
	else
		trap "trap_No" 1 2 3 6 15
		if [[ -d "$DIRECTORY" ]]; then
			sudo mv -f "$DIRECTORY" "$old"
		fi
		if [[ -d "$DIRECTORY" && "$trapSet" = "true" ]]; then
			error_Trap "RESTORING OLD [$NAME_PRETTY]"
			sudo mv -f "$old/$FOLDER" "$DIRECTORY"
			exit
		fi
		sudo mkdir -p "$DIRECTORY"
		sudo mv "$tmp/$folderName"/* "$DIRECTORY"
		if [[  -d "$DIRECTORY" && "$trapSet" = "true" ]]; then
			error_Trap "RESTORING OLD [$NAME_PRETTY]"
			sudo rm -fr "$DIRECTORY"
			sudo mv -f "$old/$FOLDER" "$DIRECTORY"
			exit
		fi
	fi
	upgrade_Post
}

upgrade_Pre()
{
	if [[ "$NAME_VER" = "" && "$INSTALL" != "true" ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$ired; echo "is not installed"
	elif [[ "$NAME_OLD" != "true" && "$FORCE_UPGRADE" != "true" ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$bgreen; echo "up to date" ;$off
	else
		prompt_Sudo ; error_Sudo
		echo ; safety_HashList
		trap "trap_Tmp" 1 2 3 6
		tmp_Create ; error_Exit "Could not create tmp folder"
	fi
}

upgrade_Post()
{
	trap "trap_Post" 1 2 3 6 15
	sudo rm -rf "$old"
	print_WhiteHash "Updating local state"
	version_"$NAME_FUNC"
	sudo sed -i "s@.*"$NAME_CAPS"_VER=.*@"$NAME_CAPS"_VER=\""$NewVer"\"@" "$state"
	sudo sed -i "s@.*"$NAME_CAPS"_OLD=.*@"$NAME_CAPS"_OLD=\"false\"@" "$state"
	$white; echo -n "$NewVer: " ;$igreen; echo "VERSION" ;$off
	PRODUCE_HASH_LIST
	tmp_Del
	error_Exit "Could not cleanup tmp folder"
	if [[ "$INSTALL" = "true" ]]; then
		print_GreenHash "Installed [$NAME_PRETTY]"
	else
		print_GreenHash "Upgraded [$NAME_PRETTY]"
	fi
}

upgrade_Monero()
{
	NAME_VER="$MONERO_VER"
	NAME_OLD="$MONERO_OLD"
	NAME_PRETTY="Monero"
	NAME_FUNC="Monero"
	DIRECTORY="$binMonero"
	NAME_CAPS="MONERO"
	FOLDER="monero"
	upgrade_Template
}

upgrade_MoneroBash()
{
	NAME_VER="$MONERO_BASH_VER"
	NAME_OLD="$MONERO_BASH_OLD"
	NAME_PRETTY="monero-bash"
	NAME_FUNC="MoneroBash"
	DIRECTORY="$installDirectory"
	NAME_CAPS="MONERO_BASH"
	upgrade_Template
}

upgrade_XMRig()
{
	NAME_VER="$XMRIG_VER"
	NAME_OLD="$XMRIG_OLD"
	NAME_PRETTY="XMRig"
	NAME_FUNC="XMRig"
	DIRECTORY="$binXMRig"
	NAME_CAPS="XMRIG"
	FOLDER="xmrig"
	upgrade_Template
}

upgrade_P2Pool()
{
	NAME_VER="$P2POOL_VER"
	NAME_OLD="$P2POOL_OLD"
	NAME_PRETTY="P2Pool"
	NAME_FUNC="P2Pool"
	DIRECTORY="$binP2Pool"
	NAME_CAPS="P2POOL"
	FOLDER="p2pool"
	upgrade_Template
}

upgrade_All()
{
	[[ $MONERO_BASH_VER != "" ]]&& upgrade_MoneroBash
	[[ $MONERO_VER != "" ]]&& upgrade_Monero
	[[ $XMRIG_VER != "" ]]&& upgrade_XMRig
	[[ $P2POOL_VER != "" ]]&& upgrade_P2Pool
}
