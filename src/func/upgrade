#!/usr/bin/env bash
#
#						Upgrade Functions
#
upgrade_Template()
{
	if [[ "$NAME_VER" = "" && "$INSTALL" != "true" ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$ired; echo "is not installed"
	elif [[ "$NAME_OLD" != "true" && "$FORCE_UPGRADE" != "true" ]]; then
		$white; echo -n "$NAME_PRETTY: "
		$bgreen; echo "up to date" ;$off
	else
		prompt_Sudo;error_Sudo
		echo;safety_HashList
		tmp_Create;error_Exit "Could not create tmp folder"
		print_GreenHash "Downloading [$NAME_PRETTY]"
		download_"$NAME_FUNC"
		code_Wget
		print_WhiteHash "Verifying"
		verify_hash_"$NAME_FUNC"
		if [[ "$verifyOK" = "true" ]]; then
			print_WhiteHash "Extracting"
			tar -xf "$tmp/$tarName" -C "$tmp" &&
			rm -f "$tmp/$tarName" &&
			$white; echo -n "$tarName: "
			$igreen; echo "EXTRACTED" ;$off
			local folderName="$(ls "$tmp")"
			if [[ $folderName = "" ]]; then
				$ired; echo "monero-bash error: extracted tar was not found"
				$white; echo "Exiting for safety..."
				exit
			fi
			if [[ -d "$DIRECTORY" ]]; then
				mkdir -p "$old"
				if [[ "$NAME_CAPS" = "MONERO_BASH" ]]; then
					sudo cp "$installDirectory/monero-bash" "$old"
					sudo cp -r "$installDirectory/src" "$old"
					sudo cp -r "$installDirectory/config" "$old"
				else
					sudo mv "$DIRECTORY" "$old"
				fi
			fi
			if [[ "$NAME_CAPS" = "MONERO_BASH" ]]; then
				sudo cp -f "$tmp/$folderName/monero-bash" "$installDirectory"
				sudo cp -fr "$tmp/$folderName/src" "$installDirectory"
				sudo cp -fr "$tmp/$folderName/config" "$installDirectory"
				sudo cp -f "$old/src/txt/state" "$state"
			else
				sudo mkdir -p "$DIRECTORY"
				sudo mv "$tmp/$folderName"/* "$DIRECTORY"
			fi
			sudo rm -rf "$old"
			print_WhiteHash "Updating local state"
			version_"$NAME_FUNC"
			sudo sed -i "s@.*"$NAME_CAPS"_VER=.*@"$NAME_CAPS"_VER=\""$NewVer"\"@" "$state"
			sudo sed -i "s@.*"$NAME_CAPS"_OLD=.*@"$NAME_CAPS"_OLD=\"false\"@" "$state"
			$white; echo -n "$NewVer: "
			$igreen; echo "VERSION" ;$off
			PRODUCE_HASH_LIST
		else
			compromised_hash_"$NAME_FUNC"
			exit
		fi
		tmp_Del;error_Exit "Could not cleanup tmp folder"
		if [[ "$INSTALL" = "true" ]]; then
			print_GreenHash "Installed [$NAME_PRETTY]"
		else
			print_GreenHash "Upgraded [$NAME_PRETTY]"
		fi
	fi
}

upgrade_Monero()
{
	NAME_VER="$MONERO_VER"
	NAME_OLD="$MONERO_OLD"
	NAME_PRETTY="Monero"
	NAME_FUNC="Monero"
	DIRECTORY="$binMonero"
	NAME_CAPS="MONERO"
	upgrade_Template
}

upgrade_MoneroBash()
{
	NAME_VER="$MONERO_BASH_VER"
	NAME_OLD="$MONERO_BASH_OLD"
	NAME_PRETTY="monero-bash"
	NAME_FUNC="MoneroBash"
	DIRECTORY="$installDirectory"
	NAME_CAPS="MONERO_BASH"
	upgrade_Template
}

upgrade_XMRig()
{
	NAME_VER="$XMRIG_VER"
	NAME_OLD="$XMRIG_OLD"
	NAME_PRETTY="XMRig"
	NAME_FUNC="XMRig"
	DIRECTORY="$binXMRig"
	NAME_CAPS="XMRIG"
	upgrade_Template
}

upgrade_P2Pool()
{
	NAME_VER="$P2POOL_VER"
	NAME_OLD="$P2POOL_OLD"
	NAME_PRETTY="P2Pool"
	NAME_FUNC="P2Pool"
	DIRECTORY="$binP2Pool"
	NAME_CAPS="P2POOL"
	upgrade_Template
}

upgrade_All()
{
	[[ $MONERO_BASH_VER != "" ]]&& upgrade_MoneroBash
	[[ $MONERO_VER != "" ]]&& upgrade_Monero
	[[ $XMRIG_VER != "" ]]&& upgrade_XMRig
	[[ $P2POOL_VER != "" ]]&& upgrade_P2Pool
}
