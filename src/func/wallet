#!/usr/bin/env bash
#
#						Monero Wallet Functions
#
wallet_Start()
{
	missing_MoneroCLI
	if [[ $AUTO_START_DAEMON = "true" ]]; then
		if [[ $SYSTEMD_MONEROD = "true" ]]; then
			daemon_systemd_Monerod
		else
			daemon_StartDetached
		fi
	fi
	missing_ConfigWallet
	if [[ $createWallet = "true" ]]; then
		"$binMonero/monero-wallet-cli" \
			--generate-new-wallet "$wallets/$walletName" \
			--password "$walletPassword" \
			--mnemonic-language "$seedLanguage" \
			--config-file "$config/monero-wallet-cli.conf"
			error_Exit "Could not start monero-wallet-cli"
	else
		"$binMonero/monero-wallet-cli" \
			--wallet-file "$wallets/$walletSelection" \
			--password "$walletPassword" \
			--config-file "$config/monero-wallet-cli.conf"
			error_Exit "Could not start monero-wallet-cli"
	fi
	if [[ $AUTO_STOP_DAEMON = "true" ]]; then
		if [[ $SYSTEMD_MONEROD = "true" ]]; then
			daemon_systemd_Stop
		else
			daemon_Stop
		fi
	fi
}

wallet_Create()
{
	# wallet name
	while true ;do
		$white; echo -n "New wallet name: " ;$iwhite
		read walletName
		if [[ "$walletName" = *" "* || "$walletName" = "" ]]; then
			$ired; echo "Error: wallet name cannot be empty or have spaces"
		else
			break
		fi
	done
	# wallet pass
	while true; do
		$white; echo -n "Wallet password: "
		read -s walletPassword
		echo
		$white; echo -n "Enter password again: "
		read -s walletPasswordAgain
		echo
		if [[ "$walletPassword" = "$walletPasswordAgain" ]]; then
			break
		else
			$ired; echo "Password was not the same!"
		fi
	done
	# wallet seed language
	while true ;do
		$ired; echo "Monero seed languages:" ;$iwhite
		print_SeedLanguageList
		$white; echo -n "Pick seed language: " ;$iwhite
		read seedLanguage
			case "$seedLanguage" in
				"0"|deutsch|Deutsch|german|German) seedLanguage="Deutsch" ;break ;;
				"1"|english|English) seedLanguage="English" ;break ;;
				"2"|español|Español|spanish|Spanish) seedLanguage="Español" ;break ;;
				"3"|français|Français|french|French) seedLanguage="Français" ;break ;;
				"4"|italiano|Italiano|italian|Italian) seedLanguage="Italiano" ;break ;;
				"5"|nederlands|Nederlands|dutch|Dutch) seedLanguage="Nederlands" ;break ;;
				"6"|português|Português|portuguese|Portuguese) seedLanguage="Português" ;break ;;
				"7"|"русский язык"|russian|Russian) seedLanguage="русский язык" ;break ;;
				"8"|日本語|にほんご|japanese|Japanese) seedLanguage="日本語" ;break ;;
				"9"|"简体中文(中国)"|"简体中文"|"简体中文 (中国)"|chinese|Chinese) seedLanguage="简体中文 (中国)" ;break ;;
				"10"|esperanto|Esperanto) seedLanguage="Esperanto" ;break ;;
				"11"|lojban|Lojban) seedLanguage="Lojban" ;break ;;
				*) $ired; echo "error: invalid input" ;;
			esac
		done
	$bred; echo "Starting Monero..." ;$off
	createWallet="true"
	wallet_Start
}

wallet_Count()
{
	walletCount="$(ls "$wallets" | grep -v ".keys" | wc -l)"
	$bwhite; echo -n "$walletCount " ;$off
	if [[ $walletCount = "1" ]]; then
		echo "wallet found:"
	elif [[ $walletCount > "1" ]]; then
		echo "wallets found: "
	elif [[ $walletCount = "0" ]]; then
		ZERO_WALLETS="true"
		echo "wallets found"
		if [[ $interactive = "true" ]]; then
			echo -n "Create one? (Y/n) " ;$iwhite
			Yes(){ wallet_Create ;exit ;}
			No(){ $white; echo "Exiting..." ;exit ;}
			prompt_YESno
		fi
	fi
}

wallet_List()
{
	walletList="$(ls "$wallets" | grep -v ".keys" | tr "\n" " " | sed "s/ /  /g")"
	$ired; echo "$walletList"
}
